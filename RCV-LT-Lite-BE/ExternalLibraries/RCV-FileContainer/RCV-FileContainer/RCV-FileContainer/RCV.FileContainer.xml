<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RCV.FileContainer</name>
    </assembly>
    <members>
        <member name="T:RCV.FileContainer.Container.AzureBlobContainer">
            <inheritdoc />
            <summary>
            Container definition for access of an azure blob container.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.#ctor(System.String,System.String)">
            <summary>
            Creates a blob container utility wrapper for azure infrastructure.
            </summary>
            <param name="cloudStorageConnectionString">The connection string for azure (valid format needed), e.g. DefaultEndpointsProtocol=https;AccountName=bmwrcvdev;AccountKey=APUfaYGYAOk7owSH2P2Uy/2BWDYxFLJsKgGcG0DyhdYdWS6TRfdEYmKvlk7VewwdaorfetwB2MSfLckQm7a9YA==;EndpointSuffix=core.windows.net</param>
            <param name="blobContainerName">The name of configured azure blob container.</param>
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.CopyDirectory(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.CopyFile(System.String,System.String[],System.String,System.String[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.CreateDirectory(System.String,System.String[])">
            <inheritdoc />
            <summary>
            Does not actually create a directory since in an azure blob storage based platform there are no real directories, only virtual directories
            </summary>
            <param name="directoryName">Name of the directory to be created</param>
            <param name="path">Path of the directory to be created</param>
            <returns>Relative directory path segments</returns>
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.CreateFile(System.String,System.Byte[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.CreateFile(System.String,System.IO.Stream,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.DeleteDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.DeleteFile(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.ExistsDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.ExistsFile(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.ExistsPath(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetDirectories(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetDirectoryNames(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetFileContent(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetFileNames(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetFiles(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetFileStream(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.GetWriteStream(System.String,System.String[])">
            <inheritdoc />
            <summary>
            Downloads the blob from azure blob storage. Usage of this methods requires a separate call of UploadFromStreamAsync() of a blob;
            </summary>
            <param name="fileName">Name of the file to get the write stream from</param>
            <param name="path">Path of the file to get the write stream from</param>
            <returns>A local memory stream.</returns>
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.MoveDirectory(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.ReadAllBytes(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.SetFileContent(System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureBlobContainer.SetFileStream(System.String,System.IO.Stream,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:RCV.FileContainer.Container.AzureFileContainer">
            <inheritdoc />
            <summary>
            Container definition for access of an azure file share.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.#ctor(System.String,System.String)">
            <summary>
            Creates a file share utility wrapper for azure infrastructure.
            </summary>
            <param name="cloudStorageConnectionString">The connection string for azure (valid format needed), e.g. DefaultEndpointsProtocol=https;AccountName=bmwrcvdev;AccountKey=APUfaYGYAOk7owSH2P2Uy/2BWDYxFLJsKgGcG0DyhdYdWS6TRfdEYmKvlk7VewwdaorfetwB2MSfLckQm7a9YA==;EndpointSuffix=core.windows.net</param>
            <param name="shareName">The name of configured azure file share.</param>
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.CopyDirectory(System.String,System.String[],System.String[])">
            <inheritdoc />
            Copies only first tier sub directory and files.
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.CopyFile(System.String,System.String[],System.String,System.String[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.CreateDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.CreateFile(System.String,System.Byte[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.CreateFile(System.String,System.IO.Stream,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.DeleteDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.DeleteFile(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.ExistsDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.ExistsFile(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.ExistsPath(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetDirectories(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetDirectoryNames(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetFileContent(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetFileNames(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetFiles(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetFileStream(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.GetWriteStream(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.MoveDirectory(System.String,System.String[],System.String[])">
            <inheritdoc />
            Moves only first tier sub directory and files.
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.ReadAllBytes(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.SetFileContent(System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.AzureFileContainer.SetFileStream(System.String,System.IO.Stream,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:RCV.FileContainer.Container.SystemFileContainer">
            <inheritdoc />
            <summary>
            Container definition for access of an on-premise file system.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.#ctor(System.String)">
            <summary>
            Creates a file share utility wrapper for on premise infrastructure.
            </summary>
            <param name="rootPath">Path to the root directory to wrap the file-container around.</param>
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.CopyDirectory(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.CopyFile(System.String,System.String[],System.String,System.String[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.CreateDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.CreateFile(System.String,System.Byte[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.CreateFile(System.String,System.IO.Stream,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.DeleteDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.DeleteFile(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.ExistsDirectory(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.ExistsFile(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.ExistsPath(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetDirectories(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetDirectoryNames(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetFileContent(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetFileNames(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetFiles(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetFileStream(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.GetWriteStream(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.MoveDirectory(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.ReadAllBytes(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.SetFileContent(System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:RCV.FileContainer.Container.SystemFileContainer.SetFileStream(System.String,System.IO.Stream,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:RCV.FileContainer.Contracts.IFileContainer">
            <summary>
            Container definition for access of file-container
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.CopyDirectory(System.String,System.String[],System.String[])">
            <summary>
            Copies directory with given name from source to target. Fully recursive only on premise and blob storage. 
            </summary>
            <param name="directoryName">Name of directory to copy from source to target</param>
            <param name="sourcePath">Relative source path to folder</param>
            <param name="targetPath">Relative target path to folder</param>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.CopyFile(System.String,System.String[],System.String,System.String[],System.Boolean)">
            <summary>
            Copies directory with given name from source to target recursively.
            Current limitation applies only to azure file storage (only first tier folders and files will be touched).
            </summary>
            <param name="sourceFileName">Name of source file</param>
            <param name="sourceParentFolders">Relative source path to file</param>
            <param name="targetFileName">Name of target file</param>
            <param name="targetParentFolders">Relative target path to file</param>
            <param name="overwriteIfExists">Flag to control overwrite mechanism if file already exists</param>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.CreateDirectory(System.String,System.String[])">
            <summary>
            Create directory with specified name at specified location.
            </summary>
            <param name="directoryName">Directory name to create</param>
            <param name="path">Relative path to create</param>
            <returns>The full path of the new directory</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.CreateFile(System.String,System.Byte[],System.String[])">
            <summary>
            Create file with specified name and content at specified location. Creates needed sub directories itself.
            </summary>
            <param name="fileName">File name to create</param>
            <param name="fileContent">File content to create</param>
            <param name="path">Path to create</param>
            <returns>The full qualified path of the new file</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.CreateFile(System.String,System.IO.Stream,System.String[])">
            <summary>
            Create file with specified name and content at specified location. Creates needed sub directories itself.
            </summary>
            <param name="fileName">File name to create</param>
            <param name="fileContent">File content to create</param>
            <param name="path">Path to create</param>
            <returns>The full qualified path of the new file</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.DeleteDirectory(System.String,System.String[])">
            <summary>
            Delete directory (and content) with given name
            </summary>
            <param name="directoryName">Name of directory</param>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.DeleteFile(System.String,System.String[])">
            <summary>
            Delete file with given name.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="path">Path to file</param>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.ExistsDirectory(System.String,System.String[])">
            <summary>
            Checks if directory with given name exists at given path.
            </summary>
            <param name="directoryName">Name of directory</param>
            <param name="path">Path to directory</param>
            <returns>TRUE if directory exists, otherwise FALSE</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.ExistsFile(System.String,System.String[])">
            <summary>
            Checks if file with given name exists at given path.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="path">Path to file</param>
            <returns>TRUE if file exists, otherwise FALSE</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.ExistsPath(System.String[])">
            <summary>
            Checks if the given path exists.
            </summary>
            <param name="path">Path to check</param>
            <returns>TRUE if path exists, otherwise FALSE</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetDirectories(System.String[])">
            <summary>
            Get directories from given folder
            </summary>
            <param name="path">Empty means root otherwise 2nd level folder</param>
            <returns>Enumerable of string which contains the full directory paths</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetDirectoryNames(System.String,System.String[])">
            <summary>
            Get names of directory at given path which are matching the given search pattern
            </summary>
            <param name="searchPattern">Pattern to search for</param>
            <param name="path">Path to directory</param>
            <returns>Enumerable of strings which contains the directory names</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetFileContent(System.String,System.String[])">
            <summary>
            Get content of file as string.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="path">Path to file</param>
            <returns>Content of file as string</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetFileNames(System.String,System.String[])">
            <summary>
            Get names of files at given directory and path which are matching the given search pattern.
            </summary>
            <param name="searchPattern">Pattern to search for</param>
            <param name="path">Path to directory</param>
            <returns>List of file-names</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetFiles(System.String[])">
            <summary>
            Get files from given folder.
            If directory does not exist, it will be created by the method.
            </summary>
            <param name="path">Empty means root otherwise 2nd level folder.</param>
            <returns>Enumerable of string which contains the full file paths</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetFileStream(System.String,System.String[])">
            <summary>
            Get file content as stream.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="path">Path to file</param>
            <returns>Content of file as stream</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.GetWriteStream(System.String,System.String[])">
            <summary>
            Get stream to write content.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="path">Path to file</param>
            <returns>Stream to write content to</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.MoveDirectory(System.String,System.String[],System.String[])">
            <summary>
            Moves directory with given name from source to target recursively.
            Current limitation applies only to azure file storage (only first tier folders and files will be touched).
            </summary>
            <param name="directoryName">Name of directoryName to move from source to target</param>
            <param name="sourcePath">Relative source path to folder</param>
            <param name="targetPath">Relative target path to folder</param>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.ReadAllBytes(System.String,System.String[])">
            <summary>
            Reads out all content as byte array of a file with specified name and location.
            </summary>
            <param name="fileName">File name of desired file</param>
            <param name="path">Location of desired file</param>
            <returns>Content of the file as byte array</returns>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.SetFileContent(System.String,System.String,System.String[])">
            <summary>
            Set content of file with given string-content.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="fileContent">Content of file as string</param>
            <param name="path">Path to file</param>
        </member>
        <member name="M:RCV.FileContainer.Contracts.IFileContainer.SetFileStream(System.String,System.IO.Stream,System.String[])">
            <summary>
            Set file content of file (specified by filename, parent directory and directory path) with stream-content.
            </summary>
            <param name="fileName">Name of file</param>
            <param name="streamContent">Content of file as stream</param>
            <param name="path">Path to the directory</param>
        </member>
        <member name="T:RCV.FileContainer.Enumerations.EBlobType">
            <summary>
            Enumeration to differ between blobs and virtual directories meant to be used in the <see cref="T:RCV.FileContainer.Container.AzureBlobContainer"/>
            </summary>
        </member>
        <member name="F:RCV.FileContainer.Enumerations.EBlobType.Blobs">
            <summary>
            Represents binary large objects
            </summary>
        </member>
        <member name="F:RCV.FileContainer.Enumerations.EBlobType.Directories">
            <summary>
            Represents virtual directories
            </summary>
        </member>
        <member name="T:RCV.FileContainer.Enumerations.EFileType">
            <summary>
            Enumeration to differ between files and directories meant to be used in the <see cref="T:RCV.FileContainer.Container.AzureFileContainer"/> and <see cref="T:RCV.FileContainer.Container.SystemFileContainer"/>
            </summary>
        </member>
        <member name="F:RCV.FileContainer.Enumerations.EFileType.Files">
            <summary>
            Represents files
            </summary>
        </member>
        <member name="F:RCV.FileContainer.Enumerations.EFileType.Directories">
            <summary>
            Represents directories
            </summary>
        </member>
        <member name="T:RCV.FileContainer.Extensions.BlobExtensions">
            <summary>
            Static extension class used to provide extension methods for blob specific classes used in <see cref="T:RCV.FileContainer.Container.AzureBlobContainer"/>
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.GetTargetUri(Microsoft.WindowsAzure.Storage.Blob.CloudBlob,System.String,System.String[])">
            <summary>
            Builds the full qualified uri for a new blob
            </summary>
            <param name="cloudBlob">The blob reference to build the uri for</param>
            <param name="targetName">The name of the target directory</param>
            <param name="targetPath">The target path of the new blob</param>
            <returns>Full qualified uri for a new blob</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.GetCloudBlockBlobReference(Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer,System.String,System.String,System.String[])">
            <summary>
            Get the reference of a cloud block blob.
            </summary>
            <param name="cloudBlobContainer">The container to get the blob reference from</param>
            <param name="blobName">Name of the desired blob</param>
            <param name="directoryName">Name of the virtual directory</param>
            <param name="path">Path of the virtual directory / blob</param>
            <returns></returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.GetCloudBlobDirectoryReference(Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer,System.String,System.String[])">
            <summary>
            Returns a cloud blob directory reference at a specified location
            </summary>
            <param name="cloudBlobContainer">Container reference to get the directory reference from</param>
            <param name="directoryName">Name of the cloud blob directory</param>
            <param name="path">Path to the cloud blob directory</param>
            <returns>Cloud blob directory reference at the desired location</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.GetCloudBlobDirectoryReference(Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer,System.String[])">
            <summary>
            Returns a cloud blob directory reference at a specified location
            </summary>
            <param name="cloudBlobContainer">Container reference to get the directory reference from</param>
            <param name="path">Path to the cloud blob directory</param>
            <returns>Cloud blob directory reference at the desired location</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.EnumerateDirectory(Microsoft.WindowsAzure.Storage.Blob.CloudBlobDirectory,System.String)">
            <summary>
            Enumerates the given directory and filters based on specified searchPattern
            </summary>
            <param name="cloudBlobDirectory">Directory to enumerate on</param>
            <param name="searchPattern">Search pattern to apply</param>
            <returns>Enumerable of strings which contains all found blobs</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.EnumerateDirectory(Microsoft.WindowsAzure.Storage.Blob.CloudBlobDirectory,RCV.FileContainer.Enumerations.EBlobType,System.String)">
            <summary>
            Enumerates the given directory and filters based on specified searchPattern
            </summary>
            <param name="cloudBlobDirectory">Directory to enumerate on</param>
            <param name="blobType">Item type to look for</param>
            <param name="searchPattern">Search pattern to apply</param>
            <returns>Enumerable of strings which contains all found blobs</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.BlobExtensions.DeleteRecursive(Microsoft.WindowsAzure.Storage.Blob.CloudBlobDirectory)">
            <summary>
            Deletes recursively based on given directory.
            </summary>
            <param name="cloudBlobDirectory">Instance of the blob directory to delete from</param>
        </member>
        <member name="T:RCV.FileContainer.Extensions.FileContainerExtensions">
            <summary>
            Extension for file container
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileContainerExtensions.CopyTo(RCV.FileContainer.Contracts.IFileContainer,System.String[],RCV.FileContainer.Contracts.IFileContainer,System.String[])">
            <summary>
            Copy all files and directories from source file container to target file container.
            </summary>
            <param name="sourceFileContainer">Source file container where files are stored</param>
            <param name="sourceDataPath">Path where source data can be found</param>
            <param name="targetFileContainer">Target file container where files should be stored</param>
            <param name="targetDataPath">Path where target data should be stored</param>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileContainerExtensions.CreateDirectoryPath(RCV.FileContainer.Contracts.IFileContainer,System.String[])">
            <summary>
            Evaluates given path and creates directory
            </summary>
            <param name="fileContainer">FileContainer to extend</param>
            <param name="path">Directory Path</param>
            <returns>Path segments of created directory</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileContainerExtensions.DirectoryPathExists(RCV.FileContainer.Contracts.IFileContainer,System.String[])">
            <summary>
            Checks existence of a given directory path
            </summary>
            <param name="fileContainer">FileContainer to extend</param>
            <param name="path">Directory path</param>
            <returns>TRUE if directory exists; False if directory does not exist</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileContainerExtensions.GetFileNamesWithoutExtensions(RCV.FileContainer.Contracts.IFileContainer,System.String,System.String[])">
            <summary>
            Utilizes <see cref="T:RCV.FileContainer.Contracts.IFileContainer"/> implementation of GetFileNames(...) and cleanses off the filename extensions.
            </summary>
            <param name="fileContainer">File container to extend</param>
            <param name="searchPattern">Search pattern to apply to the list of files</param>
            <param name="path">Path of the parent directory which contains the desired files</param>
            <returns>A list of file names at a specific location without filename extensions</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileContainerExtensions.GetFileNameFromPath(System.String)">
            <summary>
            Extracts the filename from a given path
            </summary>
            <param name="path">Path to parse the filename from</param>
            <returns>Filename parsed from path</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileContainerExtensions.AddPath(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Add sub-directory path to current path array.
            </summary>
            <param name="array">Array to extend</param>
            <param name="element">Element to add</param>
            <returns>Extended path</returns>
        </member>
        <member name="T:RCV.FileContainer.Extensions.FileExtensions">
            <summary>
            Static extension class used to provide extension methods for file specific classes used in <see cref="T:RCV.FileContainer.Container.SystemFileContainer"/> and <see cref="T:RCV.FileContainer.Container.SystemFileContainer"/>.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.CopyAllTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies folder from source to target recursively.
            </summary>
            <param name="source">Source directory info</param>
            <param name="target">Target direct info</param>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.DeleteRecursive(System.IO.DirectoryInfo)">
            <summary>
            Deletes a directory and its contents recursively.
            </summary>
            <param name="directoryInfo">Directory info of directory which is supposed to be deleted.</param>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.Append(System.String[],System.String)">
            <summary>
            Appends a given string to the specified array.
            </summary>
            <param name="array">Array to append to</param>
            <param name="value">Value to append to array</param>
            <returns>A new array with the appended string value.</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.DeleteRecursive(Microsoft.WindowsAzure.Storage.File.CloudFileDirectory)">
            <summary>
            Recursive delete of folder and all included subfolders or files.
            </summary>
            <param name="cloudFileDirectory">Directory to delete</param>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.EnumerateDirectory(Microsoft.WindowsAzure.Storage.File.CloudFileDirectory,RCV.FileContainer.Enumerations.EFileType,System.String)">
            <summary>
            Enumerates a specified cloud file directory and returns items based item type and searchPattern.
            </summary>
            <param name="cloudFileDirectory">Cloud file directory to enumerate on</param>
            <param name="fileType">Item type to filter with</param>
            <param name="searchPattern">Search pattern to filter with</param>
            <returns>Enumerable of strings which contains all found names based on file type</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.GetDirectoryReference(Microsoft.WindowsAzure.Storage.File.CloudFileShare,System.String,System.String[],System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.WindowsAzure.Storage.File.CloudFileDirectory"/> reference of a directory inside the specified container based on given directory name and path.
            </summary>
            <param name="cloudFileShare">Cloud File Share to get the file share reference from</param>
            <param name="directoryName">Directory name of the desired directory reference</param>
            <param name="path">Directory path of the desired directory reference</param>
            <param name="createIfNotExists">Flag to control the creation of the directory in case it does not exist. TRUE for creation, FALSE for cancel</param>
            <returns>A cloud file directory reference at the specified location</returns>
        </member>
        <member name="M:RCV.FileContainer.Extensions.FileExtensions.GetShareReference(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.WindowsAzure.Storage.File.CloudFileShare"/> reference of a directory inside the specified container based on given directory name and path.
            </summary>
            <param name="cloudStorageAccount">Instance of the cloud storage account to get the share reference from</param>
            <param name="shareName">Name of the cloud file share</param>
            <returns>Cloud file share reference</returns>
        </member>
        <member name="T:RCV.FileContainer.Extensions.StreamExtensions">
            <summary>
            Extension for streams.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Extensions.StreamExtensions.Rewind(System.IO.Stream)">
            <summary>
            Rewind stream to first position.
            </summary>
            <param name="stream">Stream to rewind</param>
        </member>
        <member name="T:RCV.FileContainer.Utilities.BlobUtilities">
            <summary>
            Utility class for azure blob storage.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Utilities.BlobUtilities.GetPath(System.String[])">
            <summary>
            Builds up a relative path based on specified segment parts.
            </summary>
            <param name="path">Path segments</param>
            <returns>Returns a relative path.</returns>
        </member>
        <member name="M:RCV.FileContainer.Utilities.BlobUtilities.GetPath(System.String,System.String[])">
            <summary>
            Builds up a relative path based on specified segment parts.
            </summary>
            <param name="name">Name of blob or directory</param>
            <param name="path">Path segments</param>
            <returns>Returns a relative path.</returns>
        </member>
        <member name="M:RCV.FileContainer.Utilities.BlobUtilities.GetPath(System.String,System.String)">
            <summary>
            Builds up a relative path based on specified segment parts.
            </summary>
            <param name="name">Name of blob or directory</param>
            <param name="path">Path as string</param>
            <returns>Returns a relative path.</returns>
        </member>
        <member name="T:RCV.FileContainer.Utilities.FileUtilities">
            <summary>
            Utility class for file based storage.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Utilities.FileUtilities.#ctor(System.String)">
            <summary>
            Constructor for the file based utility class.
            </summary>
            <param name="rootPath">Root path of the directory which the class will be wrapped around.</param>
        </member>
        <member name="M:RCV.FileContainer.Utilities.FileUtilities.GetPath(System.String[])">
            <summary>
            Builds up a relative path based on specified segment parts.
            </summary>
            <param name="path">Path segments</param>
            <returns>Returns a relative path.</returns>
        </member>
        <member name="M:RCV.FileContainer.Utilities.FileUtilities.GetPath(System.String,System.String[])">
            <summary>
            Builds up a relative path based on specified segment parts.
            </summary>
            <param name="name">Name of blob or directory</param>
            <param name="path">Path segments</param>
            <returns>Returns a relative path.</returns>
        </member>
        <member name="M:RCV.FileContainer.Utilities.FileUtilities.GetPath(System.String,System.String)">
            <summary>
            Builds up a relative path based on specified segment parts.
            </summary>
            <param name="name">Name of blob or directory</param>
            <param name="path">Path as string</param>
            <returns>Returns a relative path.</returns>
        </member>
        <member name="T:RCV.FileContainer.Utilities.TaskUtilities">
            <summary>
            Static utility class to execute asynchronous methods synchronously.
            </summary>
        </member>
        <member name="M:RCV.FileContainer.Utilities.TaskUtilities.ExecuteSync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Generic method to execute an asynchronously method synchronously and to access the return value.
            </summary>
            <typeparam name="T">Generic method type.</typeparam>
            <param name="asyncTask">Asynchronous generic task to execute synchronously</param>
            <returns>The generic result T.</returns>
        </member>
        <member name="M:RCV.FileContainer.Utilities.TaskUtilities.ExecuteSync(System.Threading.Tasks.Task)">
            <summary>
            Void method to execute an asynchronously method synchronously.
            </summary>
            <param name="asyncTask">Asynchronous void task to execute synchronously</param>
        </member>
    </members>
</doc>
